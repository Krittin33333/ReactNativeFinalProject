{"ast":null,"code":"\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableItem from \"../../TouchableItem\";\nimport { useTheme } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function MenuItem(props) {\n  var icon = props.icon,\n    title = props.title,\n    disabled = props.disabled,\n    onPress = props.onPress,\n    style = props.style,\n    titleStyle = props.titleStyle,\n    testID = props.testID;\n  var _useTheme = useTheme(),\n    dark = _useTheme.dark,\n    text = _useTheme.colors.text;\n  var disabledColor = dark ? styles.darkDisabled : styles.lightDisabled;\n  var titleColor = disabled ? disabledColor : {\n    color: text\n  };\n  var themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';\n  return _jsx(TouchableItem, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    pressColor: themePressColorAndroid,\n    children: _jsxs(View, {\n      style: styles.row,\n      children: [React.isValidElement(icon) && _jsx(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\",\n        children: icon\n      }), _jsx(View, {\n        style: [styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined],\n        pointerEvents: \"none\",\n        children: _jsx(Text, {\n          selectable: false,\n          numberOfLines: 1,\n          style: [styles.title, titleColor, titleStyle],\n          children: title\n        })\n      })]\n    })\n  });\n}\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 25;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  },\n  lightDisabled: {\n    color: 'rgba(0, 0, 0, 0.32)'\n  },\n  darkDisabled: {\n    color: 'rgba(255, 255, 255, 0.32)'\n  }\n});","map":{"version":3,"names":["React","TouchableItem","useTheme","MenuItem","props","icon","title","disabled","onPress","style","titleStyle","testID","dark","text","colors","disabledColor","styles","darkDisabled","lightDisabled","titleColor","color","themePressColorAndroid","container","row","isValidElement","item","content","widthWithIcon","undefined","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"sources":["C:/ReactNativeFinalProject/node_modules/react-navigation-header-buttons/src/overflowMenu/vendor/MenuItem.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport TouchableItem from '../../TouchableItem';\nimport { useTheme } from '@react-navigation/native';\n\nexport type Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: string,\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: ?React.Node,\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress: ?() => any,\n  /**\n   * @optional\n   */\n  style?: ViewStyleProp,\n  titleStyle?: ViewStyleProp,\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string,\n};\n\n/**\n * A component to show a single list item inside a Menu.\n */\nexport function MenuItem(props: Props): React.Element<typeof MenuItem> {\n  const { icon, title, disabled, onPress, style, titleStyle, testID } = props;\n\n  const {\n    dark,\n    colors: { text },\n  } = useTheme();\n\n  const disabledColor = dark ? styles.darkDisabled : styles.lightDisabled;\n  const titleColor = disabled ? disabledColor : { color: text };\n  const themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';\n\n  return (\n    <TouchableItem\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      pressColor={themePressColorAndroid}\n    >\n      <View style={styles.row}>\n        {React.isValidElement(icon) && (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            {icon}\n          </View>\n        )}\n        <View\n          style={[styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined]}\n          pointerEvents=\"none\"\n        >\n          <Text selectable={false} numberOfLines={1} style={[styles.title, titleColor, titleStyle]}>\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableItem>\n  );\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 25;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n  lightDisabled: {\n    color: 'rgba(0, 0, 0, 0.32)',\n  },\n  darkDisabled: {\n    color: 'rgba(255, 255, 255, 0.32)',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}