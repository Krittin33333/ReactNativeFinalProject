{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"borderless\", \"pressColor\", \"rippleRadius\", \"style\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar CAN_USE_RIPLLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n      borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n      _ref$pressColor = _ref.pressColor,\n      pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n      rippleRadius = _ref.rippleRadius,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var background = React.useMemo(function () {\n    return CAN_USE_RIPLLE ? TouchableNativeFeedback.Ripple(pressColor, borderless, rippleRadius) : undefined;\n  }, [pressColor, borderless, rippleRadius]);\n\n  if (CAN_USE_RIPLLE) {\n    return _jsx(TouchableNativeFeedback, _objectSpread(_objectSpread({}, rest), {}, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: background,\n      children: _jsx(View, {\n        style: style,\n        children: React.Children.only(children)\n      })\n    }));\n  } else {\n    return _jsx(TouchableOpacity, _objectSpread(_objectSpread({\n      style: style\n    }, rest), {}, {\n      children: children\n    }));\n  }\n}","map":{"version":3,"names":["React","ANDROID_VERSION_LOLLIPOP","CAN_USE_RIPLLE","Platform","OS","Version","TouchableItem","borderless","pressColor","rippleRadius","style","children","rest","background","useMemo","TouchableNativeFeedback","Ripple","undefined","canUseNativeForeground","Children","only"],"sources":["E:/reactpro/ReactNativeFinalProject/node_modules/react-navigation-header-buttons/src/TouchableItem.js"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Platform,\r\n  TouchableNativeFeedback,\r\n  TouchableOpacity,\r\n  View,\r\n  type ViewProps,\r\n} from 'react-native';\r\n\r\ntype Props = {\r\n  ...ViewProps,\r\n  pressColor?: string,\r\n  disabled?: boolean,\r\n  borderless?: boolean,\r\n  delayPressIn?: number,\r\n  onPress?: () => void,\r\n  children: React.Node,\r\n};\r\n\r\nconst ANDROID_VERSION_LOLLIPOP = 21;\r\nconst CAN_USE_RIPLLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\r\n\r\nexport default function TouchableItem({\r\n  borderless = false,\r\n  pressColor = 'rgba(0, 0, 0, .32)',\r\n  rippleRadius,\r\n  style,\r\n  children,\r\n  ...rest\r\n}: Props) {\r\n  const background = React.useMemo(() => {\r\n    return CAN_USE_RIPLLE\r\n      ? TouchableNativeFeedback.Ripple(pressColor, borderless, rippleRadius)\r\n      : undefined;\r\n  }, [pressColor, borderless, rippleRadius]);\r\n  /*\r\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\r\n   * therefore only enable it on Android Lollipop and above.\r\n   *\r\n   * All touchables on Android should have the ripple effect according to\r\n   * platform design guidelines.\r\n   * We need to pass the background prop to specify a borderless ripple effect.\r\n   */\r\n  if (CAN_USE_RIPLLE) {\r\n    return (\r\n      <TouchableNativeFeedback\r\n        {...rest}\r\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\r\n        background={background}\r\n      >\r\n        <View style={style}>{React.Children.only(children)}</View>\r\n      </TouchableNativeFeedback>\r\n    );\r\n  } else {\r\n    return (\r\n      <TouchableOpacity style={style} {...rest}>\r\n        {children}\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;AAmBA,IAAMC,wBAAwB,GAAG,EAAjC;AACA,IAAMC,cAAc,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoBJ,wBAAxE;AAEA,eAAe,SAASK,aAAT,OAOL;EAAA,2BANRC,UAMQ;EAAA,IANRA,UAMQ,gCANK,KAML;EAAA,2BALRC,UAKQ;EAAA,IALRA,UAKQ,gCALK,oBAKL;EAAA,IAJRC,YAIQ,QAJRA,YAIQ;EAAA,IAHRC,KAGQ,QAHRA,KAGQ;EAAA,IAFRC,QAEQ,QAFRA,QAEQ;EAAA,IADLC,IACK;;EACR,IAAMC,UAAU,GAAGb,KAAK,CAACc,OAAN,CAAc,YAAM;IACrC,OAAOZ,cAAc,GACjBa,uBAAuB,CAACC,MAAxB,CAA+BR,UAA/B,EAA2CD,UAA3C,EAAuDE,YAAvD,CADiB,GAEjBQ,SAFJ;EAGD,CAJkB,EAIhB,CAACT,UAAD,EAAaD,UAAb,EAAyBE,YAAzB,CAJgB,CAAnB;;EAaA,IAAIP,cAAJ,EAAoB;IAClB,OACE,KAAC,uBAAD,kCACMU,IADN;MAEE,aAAa,EAAEG,uBAAuB,CAACG,sBAAxB,EAFjB;MAGE,UAAU,EAAEL,UAHd;MAAA,UAKE,KAAC,IAAD;QAAM,KAAK,EAAEH,KAAb;QAAA,UAAqBV,KAAK,CAACmB,QAAN,CAAeC,IAAf,CAAoBT,QAApB;MAArB;IALF,GADF;EASD,CAVD,MAUO;IACL,OACE,KAAC,gBAAD;MAAkB,KAAK,EAAED;IAAzB,GAAoCE,IAApC;MAAA,UACGD;IADH,GADF;EAKD;AACF"},"metadata":{},"sourceType":"module"}