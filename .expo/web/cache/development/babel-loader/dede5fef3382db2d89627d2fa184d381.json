{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableItem from \"../../TouchableItem\";\nimport { useTheme } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function MenuItem(props) {\n  var icon = props.icon,\n      title = props.title,\n      disabled = props.disabled,\n      onPress = props.onPress,\n      style = props.style,\n      titleStyle = props.titleStyle,\n      testID = props.testID;\n\n  var _useTheme = useTheme(),\n      dark = _useTheme.dark,\n      text = _useTheme.colors.text;\n\n  var disabledColor = dark ? styles.darkDisabled : styles.lightDisabled;\n  var titleColor = disabled ? disabledColor : {\n    color: text\n  };\n  var themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';\n  return _jsx(TouchableItem, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    pressColor: themePressColorAndroid,\n    children: _jsxs(View, {\n      style: styles.row,\n      children: [React.isValidElement(icon) && _jsx(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\",\n        children: icon\n      }), _jsx(View, {\n        style: [styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined],\n        pointerEvents: \"none\",\n        children: _jsx(Text, {\n          selectable: false,\n          numberOfLines: 1,\n          style: [styles.title, titleColor, titleStyle],\n          children: title\n        })\n      })]\n    })\n  });\n}\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 25;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  },\n  lightDisabled: {\n    color: 'rgba(0, 0, 0, 0.32)'\n  },\n  darkDisabled: {\n    color: 'rgba(255, 255, 255, 0.32)'\n  }\n});","map":{"version":3,"names":["React","TouchableItem","useTheme","MenuItem","props","icon","title","disabled","onPress","style","titleStyle","testID","dark","text","colors","disabledColor","styles","darkDisabled","lightDisabled","titleColor","color","themePressColorAndroid","container","row","isValidElement","item","content","widthWithIcon","undefined","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"sources":["E:/reactpro/ReactNativeFinalProject/node_modules/react-navigation-header-buttons/src/overflowMenu/vendor/MenuItem.js"],"sourcesContent":["// @flow\r\nimport * as React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\r\nimport TouchableItem from '../../TouchableItem';\r\nimport { useTheme } from '@react-navigation/native';\r\n\r\nexport type Props = {\r\n  /**\r\n   * Title text for the `MenuItem`.\r\n   */\r\n  title: string,\r\n  /**\r\n   * Icon to display for the `MenuItem`.\r\n   */\r\n  icon?: ?React.Node,\r\n  /**\r\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean,\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress: ?() => any,\r\n  /**\r\n   * @optional\r\n   */\r\n  style?: ViewStyleProp,\r\n  titleStyle?: ViewStyleProp,\r\n  /**\r\n   * TestID used for testing purposes\r\n   */\r\n  testID?: string,\r\n};\r\n\r\n/**\r\n * A component to show a single list item inside a Menu.\r\n */\r\nexport function MenuItem(props: Props): React.Element<typeof MenuItem> {\r\n  const { icon, title, disabled, onPress, style, titleStyle, testID } = props;\r\n\r\n  const {\r\n    dark,\r\n    colors: { text },\r\n  } = useTheme();\r\n\r\n  const disabledColor = dark ? styles.darkDisabled : styles.lightDisabled;\r\n  const titleColor = disabled ? disabledColor : { color: text };\r\n  const themePressColorAndroid = dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)';\r\n\r\n  return (\r\n    <TouchableItem\r\n      style={[styles.container, style]}\r\n      onPress={onPress}\r\n      disabled={disabled}\r\n      testID={testID}\r\n      pressColor={themePressColorAndroid}\r\n    >\r\n      <View style={styles.row}>\r\n        {React.isValidElement(icon) && (\r\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\r\n            {icon}\r\n          </View>\r\n        )}\r\n        <View\r\n          style={[styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined]}\r\n          pointerEvents=\"none\"\r\n        >\r\n          <Text selectable={false} numberOfLines={1} style={[styles.title, titleColor, titleStyle]}>\r\n            {title}\r\n          </Text>\r\n        </View>\r\n      </View>\r\n    </TouchableItem>\r\n  );\r\n}\r\n\r\nconst minWidth = 112;\r\nconst maxWidth = 280;\r\nconst iconWidth = 25;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    paddingHorizontal: 8,\r\n    minWidth,\r\n    maxWidth,\r\n    height: 48,\r\n    justifyContent: 'center',\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n  },\r\n  icon: {\r\n    width: iconWidth,\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n  },\r\n  item: {\r\n    marginHorizontal: 8,\r\n  },\r\n  content: {\r\n    justifyContent: 'center',\r\n    minWidth: minWidth - 16,\r\n    maxWidth: maxWidth - 16,\r\n  },\r\n  widthWithIcon: {\r\n    maxWidth: maxWidth - (iconWidth + 48),\r\n  },\r\n  lightDisabled: {\r\n    color: 'rgba(0, 0, 0, 0.32)',\r\n  },\r\n  darkDisabled: {\r\n    color: 'rgba(255, 255, 255, 0.32)',\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}