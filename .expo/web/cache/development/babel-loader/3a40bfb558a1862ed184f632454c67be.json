{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport { HeaderButtonsContext } from \"./HeaderButtonsContext\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { OverflowMenuContext } from \"./overflowMenu/OverflowMenuContext\";\nimport { MenuItem } from \"./overflowMenu/vendor/MenuItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function HiddenItem(_ref) {\n  var onPress = _ref.onPress,\n      otherProps = _objectWithoutProperties(_ref, _excluded);\n\n  var toggleMenu = React.useContext(OverflowMenuContext);\n\n  var onMenuItemPress = function onMenuItemPress() {\n    toggleMenu();\n    onPress && onPress();\n  };\n\n  return _jsx(MenuItem, _objectSpread(_objectSpread({}, otherProps), {}, {\n    onPress: onMenuItemPress\n  }));\n}\nexport function Item(props) {\n  var HeaderButtonComponent = React.useContext(HeaderButtonsContext);\n  return _jsx(HeaderButtonComponent, _objectSpread(_objectSpread({}, props), {}, {\n    renderButtonElement: renderVisibleButton\n  }));\n}\nexport function renderVisibleButton(visibleButtonProps) {\n  var IconComponent = visibleButtonProps.IconComponent,\n      iconSize = visibleButtonProps.iconSize,\n      color = visibleButtonProps.color,\n      iconName = visibleButtonProps.iconName,\n      title = visibleButtonProps.title,\n      buttonStyle = visibleButtonProps.buttonStyle;\n  return IconComponent && iconName ? _jsx(IconComponent, {\n    name: iconName,\n    color: color,\n    size: iconSize,\n    style: StyleSheet.compose(styles.button, buttonStyle)\n  }) : _jsx(Text, {\n    style: [styles.text, {\n      color: color\n    }, buttonStyle],\n    children: title\n  });\n}\nvar styles = StyleSheet.create({\n  text: _objectSpread({}, Platform.select({\n    android: {\n      fontFamily: 'sans-serif-medium',\n      fontSize: 14,\n      marginHorizontal: 11,\n      textTransform: 'uppercase'\n    },\n    default: {\n      fontSize: 17,\n      marginHorizontal: 10,\n      textTransform: 'capitalize'\n    }\n  })),\n  button: {\n    marginHorizontal: 11\n  }\n});","map":{"version":3,"names":["React","HeaderButtonsContext","OverflowMenuContext","MenuItem","HiddenItem","onPress","otherProps","toggleMenu","useContext","onMenuItemPress","Item","props","HeaderButtonComponent","renderVisibleButton","visibleButtonProps","IconComponent","iconSize","color","iconName","title","buttonStyle","StyleSheet","compose","styles","button","text","create","Platform","select","android","fontFamily","fontSize","marginHorizontal","textTransform","default"],"sources":["E:/reactpro/ReactNativeFinalProject/node_modules/react-navigation-header-buttons/src/HeaderItems.js"],"sourcesContent":["// @flow\r\nimport * as React from 'react';\r\nimport { type ItemProps, type VisibleButtonProps } from './HeaderButton';\r\nimport { type Props as MenuItemProps } from './overflowMenu/vendor/MenuItem';\r\nimport { HeaderButtonsContext } from './HeaderButtonsContext';\r\nimport { Text, StyleSheet, Platform } from 'react-native';\r\nimport { OverflowMenuContext } from './overflowMenu/OverflowMenuContext';\r\nimport { MenuItem } from './overflowMenu/vendor/MenuItem';\r\n\r\ntype HiddenItemProps = {\r\n  ...MenuItemProps,\r\n  destructive?: boolean,\r\n};\r\n\r\nexport function HiddenItem({\r\n  onPress,\r\n  ...otherProps\r\n}: HiddenItemProps): React.Element<typeof HiddenItem> {\r\n  const toggleMenu = React.useContext(OverflowMenuContext);\r\n\r\n  // when rendering dropdown menu (e.g. android default) the return value is actually rendered\r\n  // when we show action sheet, we do not render the returned value,\r\n  // but just extract title, onPress and destructive passed to HiddenItem. HiddenItem() is not called\r\n  const onMenuItemPress = () => {\r\n    toggleMenu();\r\n    onPress && onPress();\r\n  };\r\n\r\n  // $FlowFixMeProps\r\n  return <MenuItem {...otherProps} onPress={onMenuItemPress} />;\r\n}\r\n\r\n// TODO check RTL\r\nexport function Item(props: ItemProps): React.Element<typeof Item> {\r\n  const HeaderButtonComponent = React.useContext(HeaderButtonsContext);\r\n  // HeaderButtonComponent already knows iconSize, icon color and etc.\r\n  // Item itself will likely only have title and onPress but can override iconSize, icon color and etc. if needed\r\n  return <HeaderButtonComponent {...props} renderButtonElement={renderVisibleButton} />;\r\n}\r\n\r\nexport function renderVisibleButton(visibleButtonProps: VisibleButtonProps): React.Element<any> {\r\n  const { IconComponent, iconSize, color, iconName, title, buttonStyle } = visibleButtonProps;\r\n\r\n  return IconComponent && iconName ? (\r\n    <IconComponent\r\n      name={iconName}\r\n      color={color}\r\n      size={iconSize}\r\n      style={StyleSheet.compose(styles.button, buttonStyle)}\r\n    />\r\n  ) : (\r\n    <Text style={[styles.text, { color }, buttonStyle]}>{title}</Text>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  text: {\r\n    ...Platform.select({\r\n      android: {\r\n        fontFamily: 'sans-serif-medium',\r\n        fontSize: 14,\r\n        marginHorizontal: 11,\r\n        textTransform: 'uppercase',\r\n      },\r\n      default: {\r\n        fontSize: 17,\r\n        marginHorizontal: 10,\r\n        textTransform: 'capitalize',\r\n      },\r\n    }),\r\n  },\r\n  button: {\r\n    marginHorizontal: 11,\r\n  },\r\n});\r\n"],"mappings":";;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,oBAAT;;;;AAEA,SAASC,mBAAT;AACA,SAASC,QAAT;;AAOA,OAAO,SAASC,UAAT,OAG+C;EAAA,IAFpDC,OAEoD,QAFpDA,OAEoD;EAAA,IADjDC,UACiD;;EACpD,IAAMC,UAAU,GAAGP,KAAK,CAACQ,UAAN,CAAiBN,mBAAjB,CAAnB;;EAKA,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;IAC5BF,UAAU;IACVF,OAAO,IAAIA,OAAO,EAAlB;EACD,CAHD;;EAMA,OAAO,KAAC,QAAD,kCAAcC,UAAd;IAA0B,OAAO,EAAEG;EAAnC,GAAP;AACD;AAGD,OAAO,SAASC,IAAT,CAAcC,KAAd,EAA4D;EACjE,IAAMC,qBAAqB,GAAGZ,KAAK,CAACQ,UAAN,CAAiBP,oBAAjB,CAA9B;EAGA,OAAO,KAAC,qBAAD,kCAA2BU,KAA3B;IAAkC,mBAAmB,EAAEE;EAAvD,GAAP;AACD;AAED,OAAO,SAASA,mBAAT,CAA6BC,kBAA7B,EAAyF;EAC9F,IAAQC,aAAR,GAAyED,kBAAzE,CAAQC,aAAR;EAAA,IAAuBC,QAAvB,GAAyEF,kBAAzE,CAAuBE,QAAvB;EAAA,IAAiCC,KAAjC,GAAyEH,kBAAzE,CAAiCG,KAAjC;EAAA,IAAwCC,QAAxC,GAAyEJ,kBAAzE,CAAwCI,QAAxC;EAAA,IAAkDC,KAAlD,GAAyEL,kBAAzE,CAAkDK,KAAlD;EAAA,IAAyDC,WAAzD,GAAyEN,kBAAzE,CAAyDM,WAAzD;EAEA,OAAOL,aAAa,IAAIG,QAAjB,GACL,KAAC,aAAD;IACE,IAAI,EAAEA,QADR;IAEE,KAAK,EAAED,KAFT;IAGE,IAAI,EAAED,QAHR;IAIE,KAAK,EAAEK,UAAU,CAACC,OAAX,CAAmBC,MAAM,CAACC,MAA1B,EAAkCJ,WAAlC;EAJT,EADK,GAQL,KAAC,IAAD;IAAM,KAAK,EAAE,CAACG,MAAM,CAACE,IAAR,EAAc;MAAER,KAAK,EAALA;IAAF,CAAd,EAAyBG,WAAzB,CAAb;IAAA,UAAqDD;EAArD,EARF;AAUD;AAED,IAAMI,MAAM,GAAGF,UAAU,CAACK,MAAX,CAAkB;EAC/BD,IAAI,oBACCE,QAAQ,CAACC,MAAT,CAAgB;IACjBC,OAAO,EAAE;MACPC,UAAU,EAAE,mBADL;MAEPC,QAAQ,EAAE,EAFH;MAGPC,gBAAgB,EAAE,EAHX;MAIPC,aAAa,EAAE;IAJR,CADQ;IAOjBC,OAAO,EAAE;MACPH,QAAQ,EAAE,EADH;MAEPC,gBAAgB,EAAE,EAFX;MAGPC,aAAa,EAAE;IAHR;EAPQ,CAAhB,CADD,CAD2B;EAgB/BT,MAAM,EAAE;IACNQ,gBAAgB,EAAE;EADZ;AAhBuB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}